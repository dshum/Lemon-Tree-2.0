<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2009-03-04 22:42:52                           *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/
/* $Id$ */

	abstract class AutoItem extends IdentifiableObject
	{
		protected $itemName = null;
		protected $itemDescription = null;
		protected $itemOrder = null;
		protected $classType = null;
		protected $parentClass = null;
		protected $classSource = null;
		protected $tableName = null;
		protected $mainPropertyDescription = null;
		protected $controllerName = null;
		protected $pluginName = null;
		protected $filterName = null;
		protected $beforeInsert = null;
		protected $afterInsert = null;
		protected $beforeUpdate = null;
		protected $afterUpdate = null;
		protected $beforeDelete = null;
		protected $afterDelete = null;
		protected $isFolder = false;
		protected $pathPrefix = null;
		protected $orderField = null;
		protected $orderDirection = null;
		protected $perPage = 0;
		
		public function getItemName()
		{
			return $this->itemName;
		}
		
		/**
		 * @return Item
		**/
		public function setItemName($itemName)
		{
			$this->itemName = $itemName;
			
			return $this;
		}
		
		public function getItemDescription()
		{
			return $this->itemDescription;
		}
		
		/**
		 * @return Item
		**/
		public function setItemDescription($itemDescription)
		{
			$this->itemDescription = $itemDescription;
			
			return $this;
		}
		
		public function getItemOrder()
		{
			return $this->itemOrder;
		}
		
		/**
		 * @return Item
		**/
		public function setItemOrder($itemOrder)
		{
			$this->itemOrder = $itemOrder;
			
			return $this;
		}
		
		public function getClassType()
		{
			return $this->classType;
		}
		
		/**
		 * @return Item
		**/
		public function setClassType($classType)
		{
			$this->classType = $classType;
			
			return $this;
		}
		
		public function getParentClass()
		{
			return $this->parentClass;
		}
		
		/**
		 * @return Item
		**/
		public function setParentClass($parentClass)
		{
			$this->parentClass = $parentClass;
			
			return $this;
		}
		
		public function getClassSource()
		{
			return $this->classSource;
		}
		
		/**
		 * @return Item
		**/
		public function setClassSource($classSource)
		{
			$this->classSource = $classSource;
			
			return $this;
		}
		
		public function getTableName()
		{
			return $this->tableName;
		}
		
		/**
		 * @return Item
		**/
		public function setTableName($tableName)
		{
			$this->tableName = $tableName;
			
			return $this;
		}
		
		public function getMainPropertyDescription()
		{
			return $this->mainPropertyDescription;
		}
		
		/**
		 * @return Item
		**/
		public function setMainPropertyDescription($mainPropertyDescription)
		{
			$this->mainPropertyDescription = $mainPropertyDescription;
			
			return $this;
		}
		
		public function getControllerName()
		{
			return $this->controllerName;
		}
		
		/**
		 * @return Item
		**/
		public function setControllerName($controllerName)
		{
			$this->controllerName = $controllerName;
			
			return $this;
		}
		
		public function getPluginName()
		{
			return $this->pluginName;
		}
		
		/**
		 * @return Item
		**/
		public function setPluginName($pluginName)
		{
			$this->pluginName = $pluginName;
			
			return $this;
		}
		
		public function getFilterName()
		{
			return $this->filterName;
		}
		
		/**
		 * @return Item
		**/
		public function setFilterName($filterName)
		{
			$this->filterName = $filterName;
			
			return $this;
		}
		
		public function getBeforeInsert()
		{
			return $this->beforeInsert;
		}
		
		/**
		 * @return Item
		**/
		public function setBeforeInsert($beforeInsert)
		{
			$this->beforeInsert = $beforeInsert;
			
			return $this;
		}
		
		public function getAfterInsert()
		{
			return $this->afterInsert;
		}
		
		/**
		 * @return Item
		**/
		public function setAfterInsert($afterInsert)
		{
			$this->afterInsert = $afterInsert;
			
			return $this;
		}
		
		public function getBeforeUpdate()
		{
			return $this->beforeUpdate;
		}
		
		/**
		 * @return Item
		**/
		public function setBeforeUpdate($beforeUpdate)
		{
			$this->beforeUpdate = $beforeUpdate;
			
			return $this;
		}
		
		public function getAfterUpdate()
		{
			return $this->afterUpdate;
		}
		
		/**
		 * @return Item
		**/
		public function setAfterUpdate($afterUpdate)
		{
			$this->afterUpdate = $afterUpdate;
			
			return $this;
		}
		
		public function getBeforeDelete()
		{
			return $this->beforeDelete;
		}
		
		/**
		 * @return Item
		**/
		public function setBeforeDelete($beforeDelete)
		{
			$this->beforeDelete = $beforeDelete;
			
			return $this;
		}
		
		public function getAfterDelete()
		{
			return $this->afterDelete;
		}
		
		/**
		 * @return Item
		**/
		public function setAfterDelete($afterDelete)
		{
			$this->afterDelete = $afterDelete;
			
			return $this;
		}
		
		public function getIsFolder()
		{
			return $this->isFolder;
		}
		
		public function isIsFolder()
		{
			return $this->isFolder;
		}
		
		/**
		 * @return Item
		**/
		public function setIsFolder($isFolder = null)
		{
			Assert::isTernaryBase($isFolder);
			
			$this->isFolder = $isFolder;
			
			return $this;
		}
		
		public function getPathPrefix()
		{
			return $this->pathPrefix;
		}
		
		/**
		 * @return Item
		**/
		public function setPathPrefix($pathPrefix)
		{
			$this->pathPrefix = $pathPrefix;
			
			return $this;
		}
		
		public function getOrderField()
		{
			return $this->orderField;
		}
		
		/**
		 * @return Item
		**/
		public function setOrderField($orderField)
		{
			$this->orderField = $orderField;
			
			return $this;
		}
		
		public function getOrderDirection()
		{
			return $this->orderDirection;
		}
		
		public function isOrderDirection()
		{
			return $this->orderDirection;
		}
		
		/**
		 * @return Item
		**/
		public function setOrderDirection($orderDirection = null)
		{
			Assert::isTernaryBase($orderDirection);
			
			$this->orderDirection = $orderDirection;
			
			return $this;
		}
		
		public function getPerPage()
		{
			return $this->perPage;
		}
		
		/**
		 * @return Item
		**/
		public function setPerPage($perPage)
		{
			$this->perPage = $perPage;
			
			return $this;
		}
	}
?>