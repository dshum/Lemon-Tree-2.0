<?php
/*****************************************************************************
 *   Copyright (C) 2006-2007, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-0.10.8 at 2008-02-13 17:13:02                        *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/
/* $Id$ */

	final class PropertyDAO extends AutoPropertyDAO
	{
		private static $propertyList = array();
		private static $propertyReferenceList = array();

		public function getTable()
		{
			return TABLE_PREFIX.parent::getTable();
		}

		public function getSequence()
		{
			return TABLE_PREFIX.parent::getSequence();
		}

		public static function setPropertyList()
		{
			$propertyList =
				Criteria::create(Property::dao())->
				addOrder(new DBField("property_order", Property::dao()->getTable()))->
				addOrder(new DBField("id", Property::dao()->getTable()))->
				getList();

			foreach($propertyList as $property) {
				self::$propertyList[$property->getItem()->getId()][$property->getId()] = $property;
				self::$propertyReferenceList[$property->getItem()->getId()][$property->getPropertyName()] = $property;
			}
		}

		public static function getPropertyList(Item $item)
		{
			$propertyList = array();
			if(isset(self::$propertyList[$item->getId()])) {
				foreach(self::$propertyList[$item->getId()] as $property) {
					$propertyList[] = $property;
				}
			}

			return $propertyList;
		}

		public function dropPropertyList(Item $item)
		{
			if(isset(self::$propertyList[$item->getId()])) {
				foreach(self::$propertyList[$item->getId()] as $property) {
					self::dropProperty($property);
				}
			}

			unset(self::$propertyList[$item->getId()]);
			unset(self::$propertyReferenceList[$item->getId()]);
		}

		public static function getPropertyById($propertyId)
		{
			return Property::dao()->getById($propertyId);
		}

		public static function getPropertyByName(Item $item, $propertyName)
		{
			if(isset(self::$propertyReferenceList[$item->getId()][$propertyName])) {
				return self::$propertyReferenceList[$item->getId()][$propertyName];
			} else {
				throw new ObjectNotFoundException('Property with name '.$propertyName.' is not found.');
			}
		}

		public static function addProperty(Property $property)
		{
			$item = $property->getItem();
			$itemClass = $item->getClass();

			# Add table column
			if(
				$item->getClassType() == 'default'
				&& $itemClass instanceof DAOConnected
				&& $property->getPropertyClass() != 'OneToManyProperty'
			) {
				$db = DBPool::me()->getByDao($itemClass->dao());
				$class = $property->getClass(null);
				if($class && $class->column()) {
					$dialect = $db->getDialect();
					$column = $class->column()->toDialectString($dialect);
					$query =
						'ALTER TABLE '
						.$dialect->quoteTable($itemClass->dao()->getTable())
						.' ADD COLUMN '.$column.'';
					$db->queryRaw($query);
				}
			}

			/*
			# Add helper table for N:N relation
			if(
				$item->getClassType() == 'default'
				&& $property->getPropertyClass() == 'ManyToManyProperty'
			) {
				$table =
					DBTable::create('r2_town_offer_r2_phone')->
					addColumn(
						DBColumn::create(
							DataType::create(DataType::INTEGER),
							'r2_town_offer_id'
						)
					)->
					addColumn(
						DBColumn::create(
							DataType::create(DataType::INTEGER),
							'r2_phone_id'
						)
					);
				$query = OSQL::createTable($table);
				$db->query($query);
			}
			*/

			# Property order
			$nextPropertyOrder = 0;
			$propertyList = Property::dao()->getPropertyList($item);
			foreach($propertyList as $prop) {
				if($nextPropertyOrder < $prop->getPropertyOrder()) {
					$nextPropertyOrder = $prop->getPropertyOrder();
				}
			}
			$nextPropertyOrder++;
			$property->setPropertyOrder($nextPropertyOrder);

			# Add property
			$property = Property::dao()->add($property);

			self::$propertyList[$property->getItem()->getId()][$property->getId()] = $property;
			self::$propertyReferenceList[$property->getItem()->getId()][$property->getPropertyName()] = $property;

			return $property;
		}

		public static function saveProperty(Property $property)
		{
			$oldProperty = Property::dao()->getPropertyById($property->getId());

			$item = $property->getItem();
			$itemClass = $item->getClass();

			# Save table column
			if(
				$item->isDefault()
				&& $itemClass instanceof DAOConnected
				&& (
					$oldProperty->getPropertyName() != $property->getPropertyName()
					|| $oldProperty->getPropertyClass() != $property->getPropertyClass()
					|| $oldProperty->getIsRequired() != $property->getIsRequired()
				)
			) {
				$class = $property->getClass(null);
				if($class && $class->column()) {
					$linkName = $itemClass->dao()->getLinkName();
					$db = DBPool::me()->getLink($linkName);
					$dialect = $db->getDialect();
					$oldColumName = $oldProperty->getClass(null)->getColumnName();
					$column = $class->column()->toDialectString($dialect);
					$query =
						'ALTER TABLE '
						.$dialect->quoteTable($itemClass->dao()->getTable())
						.' CHANGE COLUMN '
						.$dialect->quoteField($oldColumName)
						.' '.$column.'';

					$db->queryRaw($query);
				}
			}

			# Save property
			$property = Property::dao()->save($property);

			self::$propertyList[$property->getItem()->getId()][$property->getId()] = $property;
			self::$propertyReferenceList[$property->getItem()->getId()][$property->getPropertyName()] = $property;

			return $property;
		}

		public static function dropProperty(Property $property)
		{
			$propertyId = $property->getId();
			$propertyName = $property->getPropertyName();
			$item = $property->getItem();

			if(isset(self::$propertyList[$item->getId()][$propertyId])) {

				# Drop table column
				if(
					$item->getClassType() == 'default'
					&& $property->getPropertyClass() != 'OneToManyProperty'
					&& $property->getPropertyClass() != 'ManyToManyProperty'
				) {
					$itemClass = $item->getClass();
					$linkName = $itemClass->dao()->getLinkName();
					$db = DBPool::me()->getLink($linkName);
					$dialect = $db->getDialect();
					$columnName = $property->getClass(null)->getColumnName();

					$query =
						'ALTER TABLE '
						.$dialect->quoteTable($itemClass->dao()->getTable())
						.' DROP COLUMN '
						.$dialect->quoteField($columnName);

					try {

						$db->queryRaw($query);

						# Drop parameters
						Parameter::dao()->dropParameterList($property);

						# Drop property
						Property::dao()->dropById($propertyId);

						unset(self::$propertyList[$item->getId()][$propertyId]);
						unset(self::$propertyReferenceList[$item->getId()][$propertyName]);

					} catch (DatabaseException $e) {}
				}
			}
		}
	}
?>