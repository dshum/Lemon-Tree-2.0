<?php
/*****************************************************************************
 *   Copyright (C) 2006-2007, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-0.10.6 at 2007-12-04 15:29:37                        *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/
/* $Id$ */

	final class Property extends AutoProperty implements Prototyped, DAOConnected
	{
		private static $propertyClassList = array(
			'TextfieldProperty' => 'Текстовое поле',
			'TextareaProperty' => 'Многострочное текстовое поле',
			'RichtextProperty' => 'Визуальный редактор (TinyMCE)',
			'InTextoProperty' => 'Текстовый редактор (InTexto)',
			'IntegerProperty' => 'Целое число',
			'FloatProperty' => 'Число с плавающей запятой',
			'BooleanProperty' => 'Чекбокс',
			'PasswordProperty' => 'Пароль',
			'ImageProperty' => 'Изображение',
			'FileProperty' => 'Файл',
			'DateProperty' => 'Дата',
			'TimeProperty' => 'Время',
			'TimestampProperty' => 'Дата и время',
			'LinkProperty' => 'Ссылка',
			'MultilinkProperty' => 'Множественная ссылка',
		);

		private static $onDeleteActionList = array(
			'restrict' => 'RESTRICT',
			'set_null' => 'SET NULL',
			'cascade' => 'CASCADE',
		);

		/**
		 * @return Property
		**/
		public static function create()
		{
			return new self;
		}

		/**
		 * @return PropertyDAO
		**/
		public static function dao()
		{
			return Singleton::getInstance('PropertyDAO');
		}

		/**
		 * @return ProtoProperty
		**/
		public static function proto()
		{
			return Singleton::getInstance('ProtoProperty');
		}

		public function getClass($element)
		{
			try {
				$propertyClassName = $this->getPropertyClass();
				if(
					ClassUtils::isClassName($propertyClassName)
					&& ClassUtils::isInstanceOf($propertyClassName, 'BaseProperty')
				) {
					return new $propertyClassName($this, $element);
				}
			} catch (BaseException $e) {}

			return null;
		}

		public function setter()
		{
			return 'set'.ucfirst($this->getPropertyName());
		}

		public function getter()
		{
			return 'get'.ucfirst($this->getPropertyName());
		}

		public function dropper()
		{
			return 'drop'.ucfirst($this->getPropertyName());
		}

		public static function getColumnName($name)
		{
			return trim(mb_strtolower(preg_replace(':([A-Z]):', '_\1', $name)), '_');
		}

		public static function getPropertyClassList()
		{
			return self::$propertyClassList;
		}

		public static function getOnDeleteActionList()
		{
			return self::$onDeleteActionList;
		}

		public function getFetchStrategyName()
		{
			switch($this->getFetchStrategyId()) {
				case FetchStrategy::CASCADE: return 'cascade';
				case FetchStrategy::LAZY: return 'lazy';
				default: return 'join';
			}
		}
	}
?>